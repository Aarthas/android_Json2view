package com.arthas.yiew;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Color;
import android.util.Log;
import android.util.TypedValue;
import android.view.ViewGroup;

import com.arthas.yiew.bean.Yiew;
import com.arthas.yiew.bean.YiewBean;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by Administrator on 2016/10/28.
 */

public class Utils {


    public static int dip2px(float dipValue)

    {
        float v = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dipValue, Resources.getSystem().getDisplayMetrics());
        return (int) v;
    }


    public static ViewGroup.LayoutParams createLayoutParams(ViewGroup viewGroup, YiewBean yiew) {
        ViewGroup.LayoutParams params = null;
        if (viewGroup != null) {
            try {
                /* find parent viewGroup and create LayoutParams of that class */
                Class layoutClass = viewGroup.getClass();
                while (!classExists(layoutClass.getName() + "$LayoutParams")) {
                    layoutClass = layoutClass.getSuperclass();
                }
                String layoutParamsClassname = layoutClass.getName() + "$LayoutParams";
                Class layoutParamsClass = Class.forName(layoutParamsClassname);
                /* create the actual layoutParams object */
                params = (ViewGroup.LayoutParams) layoutParamsClass.getConstructor(Integer.TYPE, Integer.TYPE).
                        newInstance(new Object[]{Utils.getWidth(yiew), Utils.getHeight(yiew)});
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (params == null) {
            params = new ViewGroup.LayoutParams(Utils.getWidth(yiew), Utils.getHeight(yiew));
        }


        return params;
    }

    private static int getHeight(YiewBean yiew) {
        Log.d("syb", "getHeight=" + yiew.height);
        int meature = meature(yiew.height);
        Log.d("syb", "getHeight=" + meature);
        return meature;
    }

    private static int getWidth(YiewBean yiew) {
        Log.d("syb", "getWidth=" + yiew.width);
        int meature = meature(yiew.width);
        Log.d("syb", "getWidth=" + meature);
        return meature;
    }

    public static int meature(String meature) {
//        Log.d("syb","line"+unit);
//        Log.d("syb","view"+view);

        if (meature == null || meature.equals("")) {
            return -2;
        }

        if (meature.equals("match") || meature.equals("match_parent")) {
            return -1;
        } else if (meature.equals("wrap") || meature.equals("wrap_content")) {
            return -2;
        } else {

            return meatureWithUnit(meature);


        }

    }

    public static int meatureWithUnit(String meature) {
        try {
            if (meature == null) {
                return 0;
            }
            Log.d("syb", "meatureWithUnit=" + meature);
            if (meature.endsWith("dp")) {
                String substring = meature.substring(0, meature.length() - 2);
                return Utils.dip2px(Integer.valueOf(substring));
            } else if (meature.endsWith("dip")) {
                String substring = meature.substring(0, meature.length() - 3);
                return Utils.dip2px(Integer.valueOf(substring));
            } else if (meature.endsWith("px")) {
                String substring = meature.substring(0, meature.length() - 2);
                return Integer.valueOf(substring);
            } else {
                return Utils.dip2px(Integer.valueOf(meature));
            }
        } catch (Exception e) {
            return -2;
        }
    }


    public static Object getValueInt(Class clazz, String varName) {

        java.lang.reflect.Field fieldRequested = null;

        try {
            fieldRequested = clazz.getField(varName);
            if (fieldRequested != null) {
                return fieldRequested.get(clazz);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return null;
    }


    public static int getDrawableId(Context context, String name) {
        return context.getResources().getIdentifier(name, "drawable", context.getPackageName());
    }

    /**
     * return the id (from the R.java autogenerated class) of the string that pass its name as argument
     */
    public static int getStringId(Context context, String name) {
        return context.getResources().getIdentifier(name, "string", context.getPackageName());
    }

    /**
     * convert densityPixel to pixel
     */
    public static float dpToPx(float dp) {
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, Resources.getSystem().getDisplayMetrics());

    }

    /**
     * convert scalePixel to pixel
     */
    public static float spToPx(float sp) {
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp, Resources.getSystem().getDisplayMetrics());
    }

    /**
     * convert pixel to densityPixel
     */
    public static float pxToDp(int px) {
        return (px / Resources.getSystem().getDisplayMetrics().density);
    }

    /**
     * convert pixel to scaledDensityPixel
     */
    public static float pxToSp(int px) {
        return (px / Resources.getSystem().getDisplayMetrics().scaledDensity);

    }

    /**
     * convert densityPixel to scaledDensityPixel
     */
    public static float dpToSp(float dp) {
        return (int) (dpToPx(dp) / Resources.getSystem().getDisplayMetrics().scaledDensity);
    }

    /**
     * return device Width
     */
    public static int deviceWidth() {
        return Resources.getSystem().getDisplayMetrics().widthPixels;
    }


    public static boolean classExists(String className) {
        try {
            Class.forName(className);
            return true;
        } catch (ClassNotFoundException ex) {
            return false;
        }
    }


    private static final AtomicInteger sNextGeneratedId = new AtomicInteger(1);

    public static int generateViewId() {
        for (; ; ) {
            final int result = sNextGeneratedId.get();
            // aapt-generated IDs have the high byte nonzero; clamp to the range under that.
            int newValue = result + 1;
            if (newValue > 0x00FFFFFF) newValue = 1; // Roll over to 1, not 0.
            if (sNextGeneratedId.compareAndSet(result, newValue)) {
                return result;
            }
        }
    }

    public static void copy(Yiew to, Yiew from) {


        if (from.width != null) {
            to.width = from.width;
        }
        if (from.height != null) {
            to.height = from.height;
        }
        if (from.id != 0) {
            to.id = from.id;
        }
        if (from.click != null) {
            to.click = from.click;
        }
        if (from.visibility != null) {
            to.visibility = from.visibility;
        }
        if (from.tag != null) {
            to.tag = from.tag;
        }
        if (from.padding != null) {
            to.padding = from.padding;
        }
        if (from.paddingLeft != null) {
            to.paddingLeft = from.paddingLeft;
        }
        if (from.paddingTop != null) {
            to.paddingTop = from.paddingTop;
        }
        if (from.paddingRight != null) {
            to.paddingRight = from.paddingRight;
        }
        if (from.paddingBottom != null) {
            to.paddingBottom = from.paddingBottom;
        }
        if (from.margin != null) {
            to.margin = from.margin;
        }
        if (from.marginLeft != null) {
            to.marginLeft = from.marginLeft;
        }
        if (from.marginTop != null) {
            to.marginTop = from.marginTop;
        }
        if (from.marginRight != null) {
            to.marginRight = from.marginRight;
        }
        if (from.marginBottom != null) {
            to.marginBottom = from.marginBottom;
        }
        if (from.background != null) {
            to.background = from.background;
        }
        if (from.gravity != null) {
            to.gravity = from.gravity;
        }
        if (from.layout_gravity != null) {
            to.layout_gravity = from.layout_gravity;
        }
        if (from.weight != 0) {
            to.weight = from.weight;
        }
        if (from.text != null) {
            to.text = from.text;
        }
        if (from.textSize != null) {
            to.textSize = from.textSize;
        }
        if (from.textColor != null) {
            to.textColor = from.textColor;
        }
        if (from.hint != null) {
            to.hint = from.hint;
        }
        if (from.maxLine != 0) {
            to.maxLine = from.maxLine;
        }
        if (from.hintColor != null) {
            to.hintColor = from.hintColor;
        }
        if (from.lineSpace != null) {
            to.lineSpace = from.lineSpace;
        }
        if (from.scaleType != null) {
            to.scaleType = from.scaleType;
        }
        if (from.src != null) {
            to.src = from.src;
        }
        if (from.layout_alignParentRight) {
            to.layout_alignParentRight = from.layout_alignParentRight;
        }
        if (from.layout_alignParentLeft) {
            to.layout_alignParentLeft = from.layout_alignParentLeft;
        }
        if (from.layout_alignParentTop) {
            to.layout_alignParentTop = from.layout_alignParentTop;
        }
        if (from.layout_alignParentBottom) {
            to.layout_alignParentBottom = from.layout_alignParentBottom;
        }
        if (from.layout_centerInParent) {
            to.layout_centerInParent = from.layout_centerInParent;
        }
        if (from.layout_centerHorizontal) {
            to.layout_centerHorizontal = from.layout_centerHorizontal;
        }
        if (from.layout_centerVertical) {
            to.layout_centerVertical = from.layout_centerVertical;
        }
        if (from.layout_toLeftOf != 0) {
            to.layout_toLeftOf = from.layout_toLeftOf;
        }
        if (from.layout_toRightOf != 0) {
            to.layout_toRightOf = from.layout_toRightOf;
        }
        if (from.layout_above != 0) {
            to.layout_above = from.layout_above;
        }
        if (from.layout_below != 0) {
            to.layout_below = from.layout_below;
        }
        if (from.layout_alignLeft != 0) {
            to.layout_alignLeft = from.layout_alignLeft;
        }
        if (from.layout_alignRight != 0) {
            to.layout_alignRight = from.layout_alignRight;
        }
        if (from.layout_alignTop != 0) {
            to.layout_alignTop = from.layout_alignTop;
        }
        if (from.layout_alignBottom != 0) {
            to.layout_alignBottom = from.layout_alignBottom;
        }
        if (from.layout_alignBaseline != 0) {
            to.layout_alignBaseline = from.layout_alignBaseline;
        }
        if (from.alignBaseline != null) {
            to.alignBaseline = from.alignBaseline;
        }
        if (from.below != null) {
            to.below = from.below;
        }
        if (from.alignBottom != null) {
            to.alignBottom = from.alignBottom;
        }
        if (from.toLeftOf != null) {
            to.toLeftOf = from.toLeftOf;
        }
        if (from.toRightOf != null) {
            to.toRightOf = from.toRightOf;
        }
        if (from.above != null) {
            to.above = from.above;
        }
        if (from.alignLeft != null) {
            to.alignLeft = from.alignLeft;
        }
        if (from.alignRight != null) {
            to.alignRight = from.alignRight;
        }
        if (from.alignTop != null) {
            to.alignTop = from.alignTop;
        }
        if (from.data != null) {
            to.data = from.data;
        }
        if (from.yiewStore != null) {
            to.yiewStore = from.yiewStore;
        }
        if (from.propertys != null) {
            to.propertys = from.propertys;
        }

    }


    public static int parseColor(String background) {
        if (background.startsWith("#")) {
            if (background.length() == 7 || background.length() == 9)
                return Color.parseColor(background);
            else if (background.length() == 4) {
                background += background.substring(1);
                return Color.parseColor(background);
            }
            if (background.length() == 5) {
                background += background.substring(1);
                return Color.parseColor(background);
            }

        }

        return 0;
    }

    public static String getValueStringIfDataExist(Yiew yiew, String text, String defaultValue) {

        String keyname = text.substring(1);
        if (yiew.data !=null)
        {
            String retValue = yiew.getData(keyname, defaultValue);
            return retValue;
        }else   if (yiew.rootComponet !=null&&yiew.rootComponet.data !=null)
        {
            String retValue = yiew.rootComponet.getData(keyname, defaultValue);
            return retValue;
        }

        else{
            return defaultValue;
        }



    }

    public static int getValueIntIfDataExist(Yiew yiew, String text, int defaultValue) {
        if (text.startsWith("&")) {
            String keyname = text.substring(1);
            int data = yiew.getDataInt(keyname, defaultValue);
            return data;
        }
        return defaultValue;
    }
}
